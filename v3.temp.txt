Продолжаю разрабатывать проект который назвал switch-simulator.

Для начала я построил файловую структуру как каркас для проекта. Главной директории дал имя 'sdk-es/' и в ней расположил директорию 'switch-simulator/'. Общий каркас структуры проекта switch-simulator выглядит так:

```
switch-simulator/
├── <bsp/
│   ├── <include/
│   │   └── <bsp.h
│   └── <src/
│       ├── <bsp_config.c
│       ├── <bsp_drivers.c
│       └── <bsp_init.c
├── build/
├── <doc/
│   ├── <api/
│   │   ├── <cli_api.md
│   │   ├── <hal_api.md
│   │   └── <sai_api.md
│   ├── <architecture/
│   │   ├── <component_diagrams/
│   │   └── <high_level_design.md
│   └── <user_guide.md
├── <drivers/
│   ├── <include/
│   │   ├── <ethernet_driver.h
│   │   └── <sim_driver.h
│   └── <src/
│       ├── <ethernet_driver.c
│       └── <sim_driver.c
├── <include/
│   ├── <common/
│   │   ├── <error_codes.h
│   │   ├── <logging.h
│   │   └── <types.h
│   ├── <hal/
│   │   ├── <hw_resources.h
│   │   ├── <packet.h
│   │   └── <port.h
│   ├── <l2/
│   │   ├── <mac_table.h
│   │   ├── <stp.h
│   │   └── <vlan.h
│   ├── <l3/
│   │   ├── <ip.h
│   │   ├── <routing_protocols.h
│   │   └── <routing_table.h
│   ├── <management/
│   │   ├── <cli.h
│   │   └── <stats.h
│   └── <sai/
│       ├── <sai_port.h
│       ├── <sai_route.h
│       └── <sai_vlan.h
├── <python/
│   ├── <api/
│   │   ├── <__init__.py
│   │   ├── <stats_viewer.py
│   │   └── <switch_controller.py
│   └── <cli/
│       ├── <cli_main.py
│       ├── <cli_parser.py
│       ├── <commands/
│       │   ├── <__init__.py
│       │   ├── <port_commands.py
│       │   ├── <routing_commands.py
│       │   └── <vlan_commands.py
│       └── <__init__.py
├── <src/
│   ├── <common/
│   │   ├── <logging.c
│   │   └── <utils.c
│   ├── <hal/
│   │   ├── <hw_simulation.c
│   │   ├── <packet.c
│   │   └── <port.c
│   ├── <l2/
│   │   ├── <mac_learning.c
│   │   ├── <mac_table.c
│   │   ├── <stp.c
│   │   └── <vlan.c
│   ├── <l3/
│   │   ├── <arp.c
│   │   ├── <ip_processing.c
│   │   ├── <routing_protocols/
│   │   │   ├── <ospf.c
│   │   │   └── <rip.c
│   │   └── <routing_table.c
│   ├── <main.c
│   ├── <management/
│   │   ├── <cli_engine.c
│   │   ├── <config_manager.c
│   │   └── <stats_collector.c
│   └── <sai/
│       ├── <sai_adapter.c
│       ├── <sai_port.c
│       ├── <sai_route.c
│       └── <sai_vlan.c
├── tests/
│   ├── integration/
│   │   ├── test_l2_switching.c
│   │   └── test_l3_routing.c
│   ├── system/
│   │   ├── test_network_scenarios.py
│   │   └── test_performance.py
│   └── unit/
│       ├── test_mac_table.c
│       ├── test_routing.c
│       └── test_vlan.c
├── tools/
│   ├── scripts/
│   │   ├── <build.sh
│   │   └── test_runner.py
│   └── simulators/
│       ├── network_topology.py
│       └── traffic_generator.c
├── <CMakeLists.txt
├── high_level_design.md
├── LICENSE
├── <Makefile
└── README.md
```



Дополнительное пояснение -  
В приведенном каркасе проекта присувстует знак "<", и это говорит о том что эта часть закончена и реализована, будь-то это файл или директория, это не имеет значения. А все то что не имеет этого "<" знака говорит о том что нужно это реализовать. Вопрос такой, все что осталось реализовать с чего взяться, за какую реализацию стоит взяться что бы продолжить разработку? 

На этом этапе из этих двух ветвей:

```
├── tests/
│   ├── integration/
│   │   ├── test_l2_switching.c
│   │   └── test_l3_routing.c
│   ├── system/
│   │   ├── test_network_scenarios.py
│   │   └── test_performance.py
│   └── unit/
│       ├── test_mac_table.c
│       ├── test_routing.c
│       └── test_vlan.c
├── tools/
│   ├── scripts/
│   │   ├── <build.sh
│   │   └── test_runner.py
│   └── simulators/
│       ├── network_topology.py
│       └── traffic_generator.c
├── <CMakeLists.txt
├── high_level_design.md
├── LICENSE
├── <Makefile
└── README.md
```


Я бы хотел взяться за `tools/`

```
├── tools/
│   ├── <scripts/
│   │   ├── <build.sh
│   │   └── <test_runner.py
│   └── simulators/
│       ├── network_topology.py
│       └── traffic_generator.c
```


Ты можешь помочь мне разработать network_topology.py и traffic_generator.c?
